import {
  createEntityAdapter,
  createSelector,
  createSlice,
  EntityState,
} from '@reduxjs/toolkit';

export const <%= upperSnakeCase(name) %>_SLICE_KEY = '<%= camelCase(name) %>';

export interface <%= titleCase(name) %>Entity {
  id: number;
}

// eslint-disable-next-line @typescript-eslint/no-empty-interface
export interface <%= titleCase(name) %>State
  extends EntityState<<%= titleCase(name) %>Entity> {}

export const <%= camelCase(name) %>Adapter =
  createEntityAdapter<<%= titleCase(name) %>Entity>();

export const initial<%= titleCase(name) %>State: <%= titleCase(name) %>State =
  <%= camelCase(name) %>Adapter.getInitialState({});

export const <%= camelCase(name) %>Slice = createSlice({
  name: <%= upperSnakeCase(name) %>_SLICE_KEY,
  initialState: initial<%= titleCase(name) %>State,
  reducers: {
    add: <%= camelCase(name) %>Adapter.addOne,
    remove: <%= camelCase(name) %>Adapter.removeOne,
    // ...
  },
});

// export reducer for store configuration.
export const <%= camelCase(name) %>Reducer = <%= camelCase(name) %>Slice.reducer;

// export action creators to be dispatched. For use with the `useDispatch` hook.
export const <%= camelCase(name) %>Actions = <%= camelCase(name) %>Slice.actions;

// export selectors to query state. For use with the `useSelector` hook.
const { selectAll, selectEntities } = <%= camelCase(name) %>Adapter.getSelectors();

export const get<%= titleCase(name) %>State = (
  rootState: Record<string, <%= titleCase(name) %>State>
): <%= titleCase(name) %>State => rootState[<%= upperSnakeCase(name) %>_SLICE_KEY];

export const selectAll<%= titleCase(name) %> = createSelector(
  get<%= titleCase(name) %>State,
  selectAll
);

export const select<%= titleCase(name) %>Entities = createSelector(
  get<%= titleCase(name) %>State,
  selectEntities
);
